<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>buy</title>
<link rel="stylesheet" href="homepagedesign.css" />
<link rel="stylesheet" href="login window.css" />
<link rel="stylesheet" href="table.css" />
    <link href='https://fonts.googleapis.com/css?family=Alex Brush' rel='stylesheet'>
</head>
<body>

<div class="logo">
    <img src="logo.jpg" alt="logop" width="1000" height="331">
    <div class="welcome">Welcome</div>
</div>

<div class="menu">

        <div class="b">menu</div>

    <button class="big-button" onclick="moveProdPage()">Products</button>
    <button class="big-button" onclick="movAboutPage()">About</button>
    <button class="big-button" onclick="myFunction()">What new</button>
    <button class="big-button" onclick="moveBuyPage()">buy</button>
    <button class="big-button" onclick="moveHomePage()">Home</button>

</div>
<div class="table-wrapper-scroll-y my-custom-scrollbar">
    <table class="table table-bordered table-striped mb-0">
<div class="centered">
<div class="content-table" data-url="/basicNames"></div>
</div>

    </table>
  </div>
<button class="submit_list" onclick="movesubmitLst()">SUBMIT</button>
</div>



</body>
<script>

    class Veg{
  constructor(basicName, quantity) {
    this.basicName = basicName;
    this.quantity = quantity;
  }
}

class  Cart {
        constructor(userId){
            this.userId = userId
            this.products = []
        }

        //while add quantity to the shopping cart, update it
        addProduct(name, q) {
            var foundIndex = this.findProduct(name);
            if(foundIndex === -1) {
                var newProduct= new Veg(name, q)
                this.products.push(newProduct)
                return
            }
            else {
                this.products[foundIndex].quantity = q
            }
             console.log(this.products);
        }

        subtractProduct(name,q) {
            var foundIndex = this.findProduct(name);
            if(foundIndex === -1)
                return
            else {
                if(q === 0)
                    this.products.splice(foundIndex, 1);
                else
                    this.products[foundIndex].quantity = q;
            }
            console.log(this.products);
        }

        findProduct(name) {
            //console.log('try to find: '+name);
            let i=0;

            for(let val of this.products)
            {
                if(val.basicName===name)
                    return i;
                else
                    i++;
            }
            return -1;

            //return this.products.findIndex(n=> n === name);
        }
}

    //move button functions
  function moveProdPage() {
  location.href = '/Products2';
}
function moveHomePage() {
  location.href = "/new";
}

function moveBuyPage() {
  location.href = "/buy";
}

function movesubmitLst() {
   //console.log(shoppingCart);
    window.localStorage.setItem('Shopping cart list', JSON.stringify(shoppingCart));
    location.href = '/submit';
}

    //take the veg names from basic veg table
    async function updateTable(root){
        const table = root.querySelector(".content-table");
        const response = await fetch('/basicNames');//await fetch("/data");
        const headers = ['שם מוצר'];
        const data = await response.json();
        console.log("data");
        console.log(root.dataset.url)
        for(let val of data) {
            console.log(val);
        }

        // Clear Table
        table.querySelector("thead tr").innerHTML = '';
        table.querySelector("tbody").innerHTML = '';
        for (const header of headers){
            table.querySelector('thead tr').insertAdjacentHTML('afterbegin', `<th>${ header }</th>`);
        }
        for (const row of data){
            let v = new Veg(row.Veg_Name, 0);
            var str=  String(row.Veg_Name);
            table.querySelector('tbody').insertAdjacentHTML('beforebegin', `
            <tr>
            <td  >
               ${ row.Veg_Name }
                <div class="counter" data-name=${row.Veg_Name}>
                <span class="down" onclick="decreaseCount(event)" >-</span>

                <input type="text" value="0">
                <span class="up" onclick="increaseCount(event)">+</span>
                </div>
            </td>
            </tr>

        `);
            //vegLst.push(v);
        }
    }


    let shoppingCart =new Cart(0);
    for (const root of document.querySelectorAll('.content-table[data-url]')){
        const table = document.createElement('table');
        table.classList.add('content-table')
        table.innerHTML = `
            <thead>
                <tr></tr>
            </thead>

            <tbody>
                <tr>
                    <td>Loading</td>
                </tr>
            </tbody>
        `;
         root.append(table);
         updateTable(root);

    }

    //for the quantity increaseCount
    function increaseCount(event) {
        var input = event.target.previousElementSibling;
        var currentVege = event.target.parentElement.getAttribute('data-name')
        var value = parseInt(input.value, 10);
        value = isNaN(value) ? 0 : value;
        value++;
        input.value = value;
        shoppingCart.addProduct(currentVege,value);
    }

    //for the quantity decreaseCount
    function decreaseCount(event) {
      var input = event.target.nextElementSibling;
      var currentVege = event.target.parentElement.getAttribute('data-name')
      var value = parseInt(input.value, 10);
      if (value > 0) {
        value = isNaN(value) ? 0 : value;
        value--;
        input.value = value;
      }
      shoppingCart.subtractProduct(currentVege,value);

    }

</script>
</html>